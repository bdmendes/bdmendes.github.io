---
import "../styles/chess.css";

export interface Props {
  id: string;
  pgn?: string;
  ply?: number;
  white?: string;
  black?: string;
}

const {
  id,
  pgn = "",
  ply = 20,
  white = "Bruno Mendes",
  black = "Bruno Mendes",
} = Astro.props;
---

<div inert class="h-52 w-52" id={id + "-container"}>
  <chess-game
    data-id={id}
    data-pgn={pgn}
    data-ply={ply}
    data-white={white}
    data-black={black}></chess-game>
</div>

<script>
  import LichessPgnViewer from "lichess-pgn-viewer";

  class ChessGame extends HTMLElement {
    renderBoard(boardId: HTMLElement) {
      LichessPgnViewer(boardId, {
        scrollToMove: false,
        showControls: false,
        showMoves: false,
        pgn: this.dataset.pgn,
        initialPly: Number(this.dataset.ply),
        orientation: this.dataset.black == "Bruno Mendes" ? "black" : "white",
      });

      const container = document.getElementById(`${this.dataset.id}-container`);
      const scaledParent =
        container?.parentElement?.parentElement?.parentElement;
      if (!scaledParent?.classList.contains("block-scale")) {
        throw new Error(
          "ChessMiniature must be wrapped in a block-scale parent"
        );
      }
      if (scaledParent) {
        scaledParent.classList.remove("block-scale");
      }
    }

    connectedCallback() {
      const boardId = `board-${this.dataset.id}`;
      this.innerHTML = `<div id="${boardId}"></div>`;
      this.renderBoard(document.getElementById(boardId)!);
    }
  }

  if (!customElements.get("chess-game")) {
    customElements.define("chess-game", ChessGame);
  }
</script>
